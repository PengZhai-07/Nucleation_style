
Currently Loaded Modules:
  1) gcc/10.3.0   2) openmpi/4.1.6

 

[gl3032.arc-ts.umich.edu:339698] MCW rank 0 is not bound (or bound to all available processors)

(.:339727): Gdk-CRITICAL **: 02:23:56.480: gdk_cursor_new_for_display: assertion 'GDK_IS_DISPLAY (display)' failed

(.:339727): Gdk-CRITICAL **: 02:23:56.549: gdk_cursor_new_for_display: assertion 'GDK_IS_DISPLAY (display)' failed
ERROR: LoadError: MethodError: objects of type Splu are not callable
Stacktrace:
  [1] __solve!(x::Vector{Float64}, ml::AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, cycle::AlgebraicMultigrid.V, b::Vector{Float64}, lvl::Int64)
    @ AlgebraicMultigrid ~/.julia/packages/AlgebraicMultigrid/ieLA1/src/multilevel.jl:268
  [2] __solve_next!(x::Vector{Float64}, ml::AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, cycle::AlgebraicMultigrid.V, b::Vector{Float64}, lvl::Int64)
    @ AlgebraicMultigrid ~/.julia/packages/AlgebraicMultigrid/ieLA1/src/multilevel.jl:241
  [3] __solve!(x::Vector{Float64}, ml::AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, cycle::AlgebraicMultigrid.V, b::Vector{Float64}, lvl::Int64)
    @ AlgebraicMultigrid ~/.julia/packages/AlgebraicMultigrid/ieLA1/src/multilevel.jl:270
--- the last 2 lines are repeated 6 more times ---
 [16] _solve!(x::Vector{Float64}, ml::AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, b::Vector{Float64}, cycle::AlgebraicMultigrid.V; maxiter::Int64, abstol::Float64, reltol::Float64, verbose::Bool, log::Bool, calculate_residual::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ AlgebraicMultigrid ~/.julia/packages/AlgebraicMultigrid/ieLA1/src/multilevel.jl:222
 [17] ldiv!(x::Vector{Float64}, p::AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, b::Vector{Float64})
    @ AlgebraicMultigrid ~/.julia/packages/AlgebraicMultigrid/ieLA1/src/preconditioner.jl:18
 [18] iterate(it::PCGIterable{AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, Float64, Float64}, iteration::Int64)
    @ IterativeSolvers ~/.julia/packages/IterativeSolvers/QnUAe/src/cg.jl:79
 [19] iterate
    @ ~/.julia/packages/IterativeSolvers/QnUAe/src/cg.jl:74 [inlined]
 [20] iterate
    @ ./iterators.jl:167 [inlined]
 [21] iterate
    @ ./iterators.jl:166 [inlined]
 [22] cg!(x::Vector{Float64}, A::SparseMatrixCSC{Float64, Int64}, b::Vector{Float64}; abstol::Float64, reltol::Float64, maxiter::Int64, log::Bool, statevars::CGStateVariables{Float64, Vector{Float64}}, verbose::Bool, Pl::AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ IterativeSolvers ~/.julia/packages/IterativeSolvers/QnUAe/src/cg.jl:229
 [23] (::var"#14#28"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(Vf_time::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:322
 [24] open(::var"#14#28"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [25] open
    @ ./io.jl:381 [inlined]
 [26] (::var"#13#27"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(dfafter::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:258
 [27] open(::var"#13#27"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [28] open
    @ ./io.jl:381 [inlined]
 [29] (::var"#12#26"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(event_stress::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:256
 [30] open(::var"#12#26"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [31] open
    @ ./io.jl:381 [inlined]
 [32] (::var"#11#25"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(event_time::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:255
 [33] open(::var"#11#25"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [34] open
    @ ./io.jl:381 [inlined]
 [35] (::var"#10#24"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(dfyr::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:254
 [36] open(::var"#10#24"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [37] open
    @ ./io.jl:381 [inlined]
 [38] (::var"#9#23"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(dfsec_et_endline::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:253
 [39] open(::var"#9#23"{IOStream, IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [40] open
    @ ./io.jl:381 [inlined]
 [41] (::var"#8#22"{IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(dfsec_et::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:252
 [42] open(::var"#8#22"{IOStream, IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [43] open
    @ ./io.jl:381 [inlined]
 [44] (::var"#7#21"{IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(dfsec::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:251
 [45] open(::var"#7#21"{IOStream, IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [46] open
    @ ./io.jl:381 [inlined]
 [47] (::var"#6#20"{IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(weakeningrate::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:250
 [48] open(::var"#6#20"{IOStream, IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [49] open
    @ ./io.jl:381 [inlined]
 [50] (::var"#5#19"{IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(v_field::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:248
 [51] open(::var"#5#19"{IOStream, IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [52] open
    @ ./io.jl:381 [inlined]
 [53] (::var"#4#18"{IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(sliprate::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:247
 [54] open(::var"#4#18"{IOStream, Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [55] open
    @ ./io.jl:381 [inlined]
 [56] (::var"#3#17"{Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64})(stress::IOStream)
    @ Main ~/Spear-normal-stress/src/main.jl:246
 [57] open(::var"#3#17"{Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, Float64, Float64, Vector{Float64}, AlgebraicMultigrid.Preconditioner{AlgebraicMultigrid.MultiLevel{Splu, GaussSeidel{SymmetricSweep}, GaussSeidel{SymmetricSweep}, SparseMatrixCSC{Float64, Int64}, Adjoint{Float64, SparseMatrixCSC{Float64, Int64}}, SparseMatrixCSC{Float64, Int64}, AlgebraicMultigrid.MultiLevelWorkspace{Vector{Float64}, 1}}, AlgebraicMultigrid.V}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Int64}, Float64, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
    @ Base ./io.jl:384
 [58] open(::Function, ::String, ::String)
    @ Base ./io.jl:381
 [59] main(P::Tuple{params_int{Int64}, params_float{Float64}, params_farray{Vector{Float64}}, params_iarray{Vector{Int64}}, SparseMatrixCSC{Float64, Int64}, Array{Int64, 3}, Int64, SMatrix{5, 5, Float64, 25}, Int64, Vector{CartesianIndex{2}}}, alphaa::Float64, cos_reduction::Float64, coseismic_b::Float64, Domain::Float64)
    @ Main ~/Spear-normal-stress/src/main.jl:245
in expression starting at /home/pengzhai/Spear-normal-stress/run.jl:107
--------------------------------------------------------------------------
Primary job  terminated normally, but 1 process returned
a non-zero exit code. Per user-direction, the job has been aborted.
--------------------------------------------------------------------------
--------------------------------------------------------------------------
mpirun detected that one or more processes exited with non-zero status, thus causing
the job to be terminated. The first process to do so was:

  Process name: [[34683,1],0]
  Exit code:    1
--------------------------------------------------------------------------
